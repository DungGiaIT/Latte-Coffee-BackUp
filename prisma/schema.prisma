generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DIRECT_URL")
}

model Category {
  id        String    @id @default(uuid())
  name      String    @unique
  startId   String
  endId     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Product {
  id            String      @id
  title         String
  description   String
  price         Float
  originalPrice Float?
  rating        Float
  reviews       Int
  image         String
  categoryId    String
  sizes         Json
  milkOptions   Json
  drinkOptions  Json
  toppings      Json
  basePrices    Json
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  orderItems    OrderItem[]
  category      Category    @relation(fields: [categoryId], references: [id])
}

model ManagerTable {
  id        String   @id(map: "Table_pkey") @default(uuid())
  tableId   Int      @unique(map: "Table_tableId_key")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status    String   @default("available")
  orders    Order[]
}

model Order {
  id              String         @id @default(uuid())
  total           Float
  status          OrderStatus    @default(PENDING)
  deliveryMethod  DeliveryMethod @default(DINE_IN)
  deliveryAddress String?
  note            String?
  customerName    String?
  customerEmail   String?
  customerPhone   String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  tableId         String?
  table           ManagerTable?  @relation(fields: [tableId], references: [id])
  items           OrderItem[]
  payment         Payment?
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  size      String?
  milk      String?
  drink     String?
  toppings  Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Payment {
  id            String        @id @default(uuid())
  orderId       String        @unique
  amount        Float
  paymentMethod PaymentMethod
  status        PaymentStatus @default(PENDING)
  paymentDate   DateTime      @default(now())
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  order         Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  COMPLETED
  CANCELLED
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  MOMO
  ZALOPAY
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum DeliveryMethod {
  PICKUP
  DELIVERY
  DINE_IN
}
